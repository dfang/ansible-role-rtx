---
# Install rtx plugins
- name: Install plugins
  ansible.builtin.shell: >
    set -o pipefail
    /usr/local/bin/rtx plugins add {{ item.name }} {{ item.repository | default() }}
  args:
    creates: "{{ rtx_dir }}/plugins/{{ item.name }}"
  with_items: "{{ rtx_plugins }}"
  when: rtx_plugins | length > 0
  become: true
  become_user: "{{ rtx_user }}"

- name: Specific tasks for {{ item }}
  ansible.builtin.include_tasks: plugins/{{ item }}.yml
  loop:
    - nodejs
    - python
    - golang
    - ruby
    - erlang
    - ruby
    - java
    - php
  when: item in plugins_to_install

# # Install plugin dependencies for build environment
# - name: Nodejs specific tasks
#   ansible.builtin.include_tasks: plugins/nodejs.yml
#   when: '"nodejs" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Erlang specific tasks
#   ansible.builtin.include_tasks: plugins/erlang.yml
#   when: '"erlang" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Ruby specific tasks
#   ansible.builtin.include_tasks: plugins/ruby.yml
#   when: '"ruby" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Python specific tasks
#   ansible.builtin.include_tasks: plugins/python.yml
#   when: '"python" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Elixir specific tasks
#   ansible.builtin.include_tasks: plugins/elixir.yml
#   when: '"elixir" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Php specific tasks
#   ansible.builtin.include_tasks: plugins/php.yml
#   when: '"php" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

- name: Install apps
  ansible.builtin.shell: >
    set -o pipefail
    /usr/local/bin/rtx install {{ item.0.name }}@{{ item.1 }}
  args:
    creates: "{{ rtx_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  with_subelements:
    - "{{ rtx_plugins }}"
    - versions
    - flags:
      skip_missing: true
  when: rtx_plugins | length > 0
  become: true
  become_user: "{{ rtx_user }}"

- name: Uninstall apps
  ansible.builtin.shell: >
    set -o pipefail
    /usr/local/bin/rtx uninstall {{ item.0.name }}@{{ item.1 }}
  args:
    removes: "{{ rtx_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  with_subelements:
    - "{{ rtx_plugins }}"
    - delete_versions
    - flags:
      skip_missing: true
  when: rtx_plugins | length > 0
  become: true
  become_user: "{{ rtx_user }}"

- name: Set global app versions
  ansible.builtin.shell: >
    set -o pipefail
    /usr/local/bin/rtx global {{ item.name }}@{{ item.global | default(item.versions | difference(item.delete_versions|default([])) | sort | first) }}
  when: item.versions is defined
  with_items: "{{ rtx_plugins }}"
  become: true
  become_user: "{{ rtx_user }}"
  changed_when: false

- name: Set group permissions
  become: true
  ansible.builtin.file:
    path: "{{ rtx_dir }}"
    owner: "{{ rtx_user }}"
    group: "{{ rtx_group }}"
    state: directory
    recurse: true
