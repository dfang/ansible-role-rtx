---
# Install rtx plugins

# TODO: need to figure out why not work
# rtx plugins add {{ item.name }} {{ item.repository | default('rtx_' + item.name + '_repository' | default('')) }}
# rtx plugins add {{ item.name }} {{ item.repository | lookup('ansible.builtin.vars', 'rtx_' + item.name + '_repository') }} could not load lookup

# 1
# - name: Install plugins with custom plugin repository
#   ansible.builtin.shell:
#     executable: "{{ bash_executable_path }}"
#     cmd: |
#       #! /usr/bin/env bash
#       set -o pipefail
#       rtx plugins add {{ item.name }} {{ item.repository | default() }}
#   args:
#     creates: "{{ rtx_dir }}/plugins/{{ item.name }}"
#   with_items: "{{ rtx_plugins }}"
#   when: rtx_plugins | length > 0 and item.repository is defined
#   become: true
#   become_user: "{{ ansible_user }}"

# 2
# - name: Install plugins
#   ansible.builtin.shell:
#     executable: "{{ bash_executable_path }}"
#     cmd: |
#       #! /usr/bin/env bash
#       set -o pipefail
#       rtx plugins add {{ item.name }} {{ lookup('ansible.builtin.vars', 'rtx_' + item.name + '_repository', default='') }}
#   args:
#     creates: "{{ rtx_dir }}/plugins/{{ item.name }}"
#   with_items: "{{ rtx_plugins }}"
#   when: rtx_plugins | length > 0 and item.repository is undefined
#   become: true
#   become_user: "{{ ansible_user }}"

# # 3 = 1 + 2
# - name: Install plugins
#   ansible.builtin.shell:
#     executable: "{{ bash_executable_path }}"
#     cmd: |
#       #! /usr/bin/env bash
#       set -o pipefail
#       export RTX_EXPERIMENTAL=1
#       export RTX_ALWAYS_KEEP_DOWNLOAD=1
#       RTX_DEBUG=1 {{ rtx_binary_installation_path }} plugins add {{ item.name }} {{ item.repository | default(lookup('ansible.builtin.vars', 'rtx_' + item.name + '_repository', default='')) }}
#   args:
#     creates: "{{ rtx_data_dir }}/plugins/{{ item.name }}"
#   environment:
#     RTX_DATA_DIR: "{{ rtx_data_dir | default(omit) }}"
#     http_proxy: "{{ http_proxy | default(omit) }}"
#     https_proxy: "{{ http_proxy | default(omit) }}"
#   with_items: "{{ rtx_plugins }}"
#   when: rtx_plugins | length > 0
#   become: true
#   become_user: "{{ ansible_user }}"

# - name: Specific tasks for {{ item }}
#   ansible.builtin.include_tasks: plugins/{{ item }}.yml
#   loop:
#     - nodejs
#     - python
#     - golang
#     - ruby
#     - erlang
#     - elixir
#     - java
#     - php
#   when: item in plugins_to_install

# # Install plugin dependencies for build environment
# - name: Nodejs specific tasks
#   ansible.builtin.include_tasks: plugins/nodejs.yml
#   when: '"nodejs" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Erlang specific tasks
#   ansible.builtin.include_tasks: plugins/erlang.yml
#   when: '"erlang" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Ruby specific tasks
#   ansible.builtin.include_tasks: plugins/ruby.yml
#   when: '"ruby" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Python specific tasks
#   ansible.builtin.include_tasks: plugins/python.yml
#   when: '"python" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Elixir specific tasks
#   ansible.builtin.include_tasks: plugins/elixir.yml
#   when: '"elixir" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

# - name: Php specific tasks
#   ansible.builtin.include_tasks: plugins/php.yml
#   when: '"php" in item["name"]'
#   with_items: "{{ rtx_plugins }}"

- name: Install apps
  # ansible.builtin.shell:
  #   executable: "{{ bash_executable_path }}"
  #   cmd: |
  #     #! /usr/bin/env bash
  #     set -o pipefail
  #     export RTX_EXPERIMENTAL=1
  #     export RTX_ALWAYS_KEEP_DOWNLOAD=1
  #     {{ rtx_binary_installation_path }} install {{ item.0.name }}@{{ item.1 }}
  ansible.builtin.shell:
    executable: "{{ bash_executable_path }}"
    cmd: |
      #! /usr/bin/env bash
      set -o pipefail
      export RTX_EXPERIMENTAL=1
      export RTX_ALWAYS_KEEP_DOWNLOAD=1
      {{ rtx_binary_installation_path }} install {{ item.0.name }}@{{ item.1 }}
  args:
    creates: "{{ rtx_data_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  environment:
    RTX_DATA_DIR: "{{ rtx_data_dir | default(omit) }}"
    http_proxy: "{{ http_proxy | default(omit) }}"
    https_proxy: "{{ http_proxy | default(omit) }}"
  register: cmd_result
  retries: 5
  until: cmd_result is succeeded
  with_subelements:
    - "{{ rtx_plugins }}"
    - versions
    - flags:
      skip_missing: true
  when: rtx_plugins | length > 0
  # become: true
  # become_user: "{{ ansible_user }}"

- name: Uninstall apps
  ansible.builtin.shell:
    executable: "{{ bash_executable_path }}"
    cmd: |
      #! /usr/bin/env bash
      set -o pipefail
      {{ rtx_binary_installation_path }} uninstall {{ item.0.name }}@{{ item.1 }}
  args:
    removes: "{{ rtx_data_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  environment:
    RTX_DATA_DIR: "{{ rtx_data_dir }}"

  with_subelements:
    - "{{ rtx_plugins }}"
    - delete_versions
    - flags:
      skip_missing: true
  when: rtx_plugins | length > 0
  # become: true
  # become_user: "{{ ansible_user }}"

- name: Set global app versions
  ansible.builtin.shell:
    executable: "{{ bash_executable_path }}"
    cmd: |
      #! /usr/bin/env bash
      set -o pipefail
      export KERL_BUILD_DOCS=no
      export KERL_INSTALL_HTMLDOCS=no
      export KERL_INSTALL_MANPAGES=no
      export RTX_DATA_DIR={{ rtx_data_dir }}
      {{ rtx_binary_installation_path }} global {{ item.name }}@{{ item.global | default(item.versions | difference(item.delete_versions|default([])) | sort | first) }}
  when: item.versions is defined
  with_items: "{{ rtx_plugins }}"
  # become: true
  # become_user: "{{ ansible_user }}"
  changed_when: false
